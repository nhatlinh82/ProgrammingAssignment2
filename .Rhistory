makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(c(1,2,3,4,5))
a <- makeVector(c(1,2,3,4,5))
cachemean(a)
b <- makeVector(c(1,2,3,4,5,6,7))
cachemean(b)
cachemean(a)
cachemean(b)
a <- makeVector(c(1,2,3,4,5,7,8,9))
cachemean(b)
cachemean(a)
?list
a <- list(a=1,b=2,c=3)
a
m
x
a
b
b
rm(list=ls())
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(c(1,2,3))
cachemean(makeVector(c(1,2,3)))
cachemean(makeVector(c(1,2,3)))
cachemean(makeVector(c(1,2,3)))
a <- makeVector(c(1,2,3))
cachemean(a)
cachemean(a)
a <- makeVector(c(1,2,3,4))
cachemean(a)
a <- makeVector(c(1,2,3))
cachemean(a)
a <- makeVector(c(1,2,3,4))
cachemean(a)
b <- makeVector(c(1,2,3,4,5,6))
cachemean(b)
cachemean(b)
cachemean(a)
b <- makeVector(c(1,2,3,4,5,6))
cachemean(c(1,2,3,4,5,6))
a <- makeVector(c(1,2,3,4))
cachemean(a)
b <- makeVector(c(1,2,3,4,5,6))
cachemean(b)
cachemean(a)
a <- makeVector(c(1,2,3,4,5,6))
cachemean(a)
a <- makeVector(c(1,2,3,4))
cachemean(a)
a <- makeVector(c(1,2,3,4,5,6))
cachemean(a)
matrix(1:9, 3,3)
a <- matrix(1:9, 3,3)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL # setting m value to NULL for new input
set <- function(y) { #
x <<- y
m <<- NULL
}
get <- function() x # Returns the matrix x stored in the main function
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix(a)
b <- makeCacheMatrix(a)
b
?solve
a
solve(a)
solve(a)
a
args(solve)
b <-matrix (1:4,2,2)
solve(b)
b
a
rm (list=lm())
rm (list=ls()
rm (list=ls())
rm (list = ls())
makeCacheMatrix <- function(x = matrix()) {
m <- NULL #Setting m value to NULL for new input
set <- function(y) {
x <<- y #Substitute the matrix in the main function
m <<- NULL #Set m back to NULL
#This function is used in cachSolve to store new resulf of invert
}
get <- function() x # Returns the matrix x that stored in the main function
setinverse <- function(inverse) m <<- inverse # Assign intput matrix to m in the main function
getinverse <- function() m #Return value of m, a.k.a from a cache
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
#Stored list of function to assign to an object
}
a <- makeCacheMatrix()
mat <- matrix(1:4,2,2)
a <- makeCacheMatrix(mat)
cacheSolve(a)
acheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cacheSolve(a)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cacheSolve(a)
cacheSolve(a)
b <- matrix (c(1,2,3,4), 2,2)
b
b <- matrix (c(1,2,3,4,2,6,,7,8,9), 3,3)
b <- matrix (c(1,2,3,4,2,6,7,8,9), 3,3)
b
mat <- b
a <- makeCacheMatrix(mat)
cacheSolve(a)
cacheSolve(a)
str(cacheSolve)
str(makeCacheMatrix)
str(lm)
args(lm)
str(ls)
x <-rnorm(100,2,4)
summary(x)
str(x)
?str
?gl
